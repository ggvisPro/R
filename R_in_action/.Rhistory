runif(20)
?runif
a <- runif(1000)
mean(a)
mean(runif(100000))
range(a)
c(1,"1")
c(1,1)
log(10)
?exp()
。3
.3
x <- c(1:4)
x
range(x)
diff(range(x))
?diff
1L
cumsum(1:10)
cumsum(1:10)
?cumsum
1:10
(x <- cumsum(cumsum(1:10)))
x1 <- x[1:(length(x) - 1)]
x2 <- x[2:length(x)]
(1:10)
c(1:10)
(1:10) == c(1:10)
x2 - x1
diff(x)
lag <- 2
x11 <- x[1:(length(x) - lag)]
xqq
x11
x12 <- x[(lag + 1):length(x)]
x12
x20 <- x12 - x11
x21 <- x20[1:(length(x20) - lag)]
x22 <- x20[(lag + 1):length(x20)]
x30 <- x22 - x21
x30
scale(x)
scale(x, scale = T)
pretty(c(-3,3), 30)
pretty(c(-3,3), 30) -> x
pretty(c(-3,3), 30) -> x
y <- dnorm(x)
?norm
?dnorm
dmorm(0)
dnorm(0)
a <- seq(-3,3,0.1)
b <- c(-3,3,0.1)
a
qnorm(0.95)
qnorm(0.9
)
qnorm(0.99)
sample(7:5)
sample(7:5)
sample(2:6, 5)
sample(2:6, 6)
sample(2:6, 6, replace =T)
nchar(x)
x
length(x)
n[1]
x[1]
map(x, nchar())
map(x, nchar
)
library(tidyverse)
map(x, nchar)
map(x, nchar())
mydata <- matrix(rnorm(30), nrow = 6)
mydata
map(mydata, mean)
apply(mydata, 1, mean)
apply(mydata, 2, mean)
map(mydata[1,], mean)
View(mydata)
map(mydata[,], mean)
map(mydata[1,], mean)
map(mydata[1:6,], mean)
map(mydata[1:2,], mean)
df <- as.tibble(mydata)
df
map(df, mean)
df
str(df)
str(mydata)
diabetes <- c("Type1", "Type2", "Type1", "Type")
diabetes <- factor(diabetes)
diabetes
status <- factor(status, order=TRUE,
levels=c("Poor", "Improved", "Excellent"))
status <- c("Poor", "Improved", "Excellent", "Poor")
status <- factor(status, ordered=TRUE)
status
status <- factor(status, order=TRUE,
levels=c("Poor", "Improved", "Excellent"))
status
sex <- factor(sex, levels=c(1, 2), labels=c("Male", "Female"))
loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
ds <- "breast-cancer-wisconsin/breast-cancer-wisconsin.data"
url <- paste(loc, ds, sep="")
?paste
breast <- read.table(url, sep=",", header=FALSE, na.strings="?")
names(breast) <- c("ID", "clumpThickness", "sizeUniformity",
"shapeUniformity", "maginalAdhesion","singleEpithelialCellSize", "bareNuclei",
"blandChromatin", "normalNucleoli", "mitosis", "class")
df <- breast[-1]
df$class <- factor(df$class, levels=c(2,4),
labels=c("
breast <- read.table(url, sep=",", header=FALSE, na.strings="?")
names(breast) <- c("ID", "clumpThickness", "sizeUniformity",
"shapeUniformity", "maginalAdhesion","singleEpithelialCellSize", "bareNuclei",
"blandChromatin", "normalNucleoli", "mitosis", "class")
breast
head(breast)
df <- breast[-1]
df
View(df)
df2 <- as.tibble(df)
library(tidyverse)
df2 <- as.tibble(df)
df2
View(df2)
head(df2)
typeof(df2[class])
typeof(df2$class)
calss(df2)
class(df2)
class(df2$class)
df$class <- factor(df$class, levels=c(2,4),
labels=c("benign", "malignant"))
df$class
class(df)
class(df2)
class(df$class)
sapply(df, typeof)
sapply(df, class)
str(df)
str(df2)
(nrow(df)
)
sample(nrow(df), 0.7*nrow(df))
?sample
sample(1:2, 5)
sample(1:2, 5, replace = T)
train <- sample(nrow(df), 0.7*nrow(df))
df.train <- df[train,]
df.validate <- df[-train,]
table(df.train$class)
table(df.validate$class)
?ftable
table((df.validate$class))
f(df.validate$class)
ftable(df.validate$class)
f_sd <- function(sd){
shudu = sd
# 1.1 对数组进行矩阵化
dim_shudu = matrix(shudu, nrow = 9)
mark_num = 0
mark_i = c()
mark_j = c()
#2  标注需填写的数组
for (i in 1:9)
for(j in 1:9)
if (dim_shudu[i, j] == 0) {
mark_num = mark_num + 1
mark_i[mark_num] = i
mark_j[mark_num] = j
}
sign = F
begin = 1
times = 0
#3 数独处理程序
#打印原数组
print("题目")
print(t(dim_shudu))
while(sign == F){
#统计第一个处理的次数times次数>9出错。
if(begin ==1) times=times+1
#将当前填写的格数值加上1
num = dim_shudu[mark_i[begin],mark_j[begin]] + 1
if(num > 9 ){
#当填写数字大于9的时候，回退到上一填空格
#并清空当前填写的格
dim_shudu[mark_i[begin],mark_j[begin]] = 0
begin = begin -1
}else{
dim_shudu[mark_i[begin],mark_j[begin]] = num
#同行的数不出现重复
if(length(which(dim_shudu[mark_i[begin],]==num))>1){
next
}
#同列的数不出现重复
if(length(which(dim_shudu[,mark_j[begin]]==num))>1){
next
}
#同块的数不出现重复
{
#判断是处于哪一块
li = (mark_i[begin]-1)%/%3 *3 +1
lj = (mark_j[begin]-1)%/%3 *3 +1
x = dim_shudu[c(li,li+1,li+2),c(lj,lj+1,lj+2)]
if(length(which(x[,]==num)) > 1){
next
}
}
#判断是否执行到最后一个空格 begin == length(mark_i)
#打印结果
if(begin == length(mark_i)){
print("数独答案")
print(t(dim_shudu))
}else{
#进行下一个空格处理
begin = begin + 1
}
}
#处理完成退出程序
if(begin > length(mark_i)){
sign = T
}
#异常退出数据
if(times >9){
print("输入的数据错误")
sign = T
}
}
}
###--------------------分割线--------
###--------------------输入条件，运行函数f_sd()-------
#1.输入数独数组
shudu = c(5,0,0,0,9,0,2,0,1,
0,0,2,0,0,7,0,0,8,
0,8,0,0,0,0,3,0,0,
0,1,4,0,0,5,0,0,0,
0,0,0,9,0,3,0,0,0,
0,0,0,8,0,0,9,4,0,
0,0,3,0,0,0,0,6,0,
6,0,0,2,0,0,1,0,0,
8,0,9,0,6,0,0,0,0)
#2.运行函数f_sd()
f_sd(shudu)
mark_i = c()
str(mark_i)
mark_i[1] <- 1
mark_i[2] <- 1
shudu = c(5,0,0,0,9,0,2,0,1,
0,0,2,0,0,7,0,0,8,
0,8,0,0,0,0,3,0,0,
0,1,4,0,0,5,0,0,0,
0,0,0,9,0,3,0,0,0,
0,0,0,8,0,0,9,4,0,
0,0,3,0,0,0,0,6,0,
6,0,0,2,0,0,1,0,0,
8,0,9,0,6,0,0,0,0)
dim_shudu = matrix(shudu, nrow = 9)
dim_shudu == 0
sum(dim_shudu == 0)
sum(dim_shudu != 0)
a <- c(0,1,1,2,,3,4)
a <- c(0,1,1,2,0,3,4)
a == 0
which(a==0)
which(dim_shudu == 0)
dim_shudu
class(dim_shudu)
str(dim_shudu)
df <- tibble(x = a, y = a)
df
df == 0
which(df==0)
?which
which(df==0, arr.ind = T)
which(dim_shudu, arr.ind = T)
which(dim_shudu == 0, arr.ind = T)
for (i in 1:9)
for (j in 1:9)
if (dim_shudu[i, j] == 0) {
mark_num = mark_num + 1
mark_i[mark_num] = i
mark_j[mark_num] = j
}
mark_num = 0
for (i in 1:9)
for (j in 1:9)
if (dim_shudu[i, j] == 0) {
mark_num = mark_num + 1
mark_i[mark_num] = i
mark_j[mark_num] = j
}
mark_num = 0
mark_i = c()
mark_j = c()
#2  标注需填写的数组
for (i in 1:9)
for (j in 1:9)
if (dim_shudu[i, j] == 0) {
mark_num = mark_num + 1
mark_i[mark_num] = i
mark_j[mark_num] = j
}
whitch(dim_shudu == 0, arr.ind = T)
whitch(dim_shudu == 0, arr.ind = T)
witch(dim_shudu == 0, arr.ind = T)
which(dim_shudu == 0, arr.ind = T)
dim_shudu
t(dim_shudu)
c(1:8)
matrix(c(1:8), nrow = 2)
?matrix
matrix(c(1:8), ncol = 4)
matrix(c(1:8), nrow = 2, byrow = T)
whitch(dim_shudu == 0, arr.ind = T)
which(dim_shudu == 0, arr.ind = T)
which(dim_shudu == 0, arr.ind = T) ->sy
sy[1]
sy
sy[1]
str(sy)
sy[2]
sy[1,]
sy[3]
sy[3,]
sy[1,3]
sy[3,1]
sy[3,]
sy[3,][1]
dim_shudu[sy[3,]]
dim_shudu[sy[3,],]
dim_shudu[sy[3,1],sy[3,2]]
dim_shudu[sy[3,][1], sy[3,][2]]
which(dim_shudu == 0)
dim_shudu[which(dim_shudu == 0)]
dim_shudu[81]
dim_shudu[70]
dim_shudu[70, ]
dim_shudu
dim_shudu[1,]
dim_shudu[1,] == 6
(dim_shudu[1,] == 6) > 1
sum((dim_shudu[1,] == 6))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages(c("VIM","mice"))
y
yes
Yes
install.packages(c("VIM","mice"))
library("VIM")
x <- as.data.frame(abs(is.na(sleep)))
head(x)
head(sleep)
df <- data.frame(rnorm(12), nrow = 3)
df
?data.frame
?as.data.frame
df <- matrix(rnorm(12), nrow = 3)
df
apply(x,2,sum)
?apply
apply(x,2,sum)>0
x[apply(x,2,sum)>0]
x[which(apply(x,2,sum)>0)]
