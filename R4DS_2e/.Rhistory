ggplot(aes(x = price)) +
geom_histogram(binwidth = 0.1)
diamonds |>
# filter(z < 6 & z > 2) |>
ggplot(aes(x = price)) +
geom_histogram(binwidth = 1)
diamonds |>
# filter(z < 6 & z > 2) |>
ggplot(aes(x = price)) +
geom_histogram()
diamonds |>
# filter(z < 6 & z > 2) |>
ggplot(aes(x = price)) +
geom_histogram(binwidth = 100)
diamonds |>
# filter(z < 6 & z > 2) |>
ggplot(aes(x = price)) +
geom_histogram(binwidth = 10000)
diamonds |>
# filter(z < 6 & z > 2) |>
ggplot(aes(x = price)) +
geom_histogram(binwidth = 1000)
diamonds |>
filter(carat %in% c(0.99, 1)) |>
count()
diamonds |>
filter(carat %in% c(0.99, 1)) |>
count(carat)
# 1. 使用 coord_cartesian() 缩放
p1 <- diamonds |>
ggplot(aes(x = z)) +
geom_histogram(binwidth = 0.02) +
coord_cartesian(xlim = c(2, 6)) +
labs(title = "使用 coord_cartesian()")
p1 <- diamonds |>
ggplot(aes(x = z)) +
geom_histogram(binwidth = 0.02) +
coord_cartesian(xlim = c(2, 6)) +
labs(title = "使用 coord_cartesian()")
p1 <- diamonds |>
ggplot(aes(x = z)) +
geom_histogram(binwidth = 0.02) +
coord_cartesian(xlim = c(2, 6)) +
labs(title = "使用 coord_cartesian()")
# 1. 使用 coord_cartesian() 缩放
diamonds |>
ggplot(aes(x = z)) +
geom_histogram(binwidth = 0.02) +
coord_cartesian(xlim = c(2, 6)) +
labs(title = "使用 coord_cartesian()")
View(p1)
# 2. 使用 xlim() 缩放
diamonds |>
ggplot(aes(x = z)) +
geom_histogram(binwidth = 0.02) +
xlim(2, 6) +
labs(title = "使用 xlim()")
diamonds |>
ggplot(aes(x = z)) +
geom_histogram() +
coord_cartesian(xlim = c(2, 6)) +
labs(title = "未设置 binwidth")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 示例
ggplot(diamonds, aes(x = price)) +
geom_histogram(na.rm = TRUE) # na.rm 默认为 TRUE
# 示例
ggplot(diamonds, aes(x = cut)) +
geom_bar() # NA 会显示为单独的条形
ggplot(mpg, aes(x = fct_reorder(class, hwy, median), y = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = hwy, y = fct_reorder(class, hwy, median))) +
geom_boxplot()
ggplot(mpg, aes(x = fct_reorder(class, hwy, median), y = hwy)) +
geom_boxplot() +
coord_flip()
ggplot(mpg, aes(x = hwy, y = fct_reorder(class, hwy, median))) +
geom_boxplot()
source("~/.active-rstudio-document", echo=TRUE)
# 创建常规箱线图和字母值图对比
p1 <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() +
labs(title = "箱线图展示") |>
View()
# 创建常规箱线图和字母值图对比
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() +
labs(title = "箱线图展示")
ggplot(diamonds, aes(x = cut, y = price)) +
geom_lv() +
labs(title = "字母值图展示")
source("~/.active-rstudio-document", echo=TRUE)
p1
p2
p3
p4
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("ggbeeswarm")
install.packages("ggbeeswarm")
install.packages("ggbeeswarm")
source("~/.active-rstudio-document", echo=TRUE)
ggplot(smaller, aes(x = carat, y = price)) +
geom_point()
smaller <- diamonds |>
filter(carat < 3)
ggplot(smaller, aes(x = carat, y = price)) +
geom_point()
smaller <- diamonds |>
filter(carat < 3)
library(diamonds)
View(p1)
library(diamonds)
library(tidyverse)
smaller <- diamonds |>
filter(carat < 3)
ggplot(smaller, aes(x = carat, y = price)) +
geom_point()
<<<<<<< HEAD
#> Warning: Removed 2 rows containing missing values or values outside the scale range
#> (`geom_point()`).
library(tidyverse)
library(palmerpenguins)
=======
ggplot(smaller, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 0.5)
ggplot(smaller, aes(x = carat, y = price)) +
geom_point(alpha = 0.5)
ggplot(smaller, aes(x = carat, y = price)) +
geom_point(alpha = 0.1)
ggplot(smaller, aes(x = carat, y = price)) +
geom_bin2d()
# install.packages("hexbin")
ggplot(smaller, aes(x = carat, y = price)) +
geom_hex()
ggplot(smaller, aes(x = carat, y = price)) +
geom_boxplot(aes(group = cut_width(carat, 0.1)))
ggplot(smaller, aes(x = carat, y = price)) +
geom_boxplot(aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
# install.packages("hexbin")
ggplot(smaller, aes(x = carat, y = price)) +
geom_hex() +
geom_smooth()
c(1:20)
str_detect(c("a", "b", "c"), "[aeiou]")
str_detect(c("a", "b", "c"), "[aeiou]")
str_detect(c("a", "b", "c"), "[aeiou]")
str_detect(c("a", "b", "c"), "[aeiou]")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
glimpse(babynames)
source("~/.active-rstudio-document", echo=TRUE)
df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
library(tidyverse)
df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
View(df)
df
source("~/.active-rstudio-document", echo=TRUE)
p1
p2
# 基础条形图
p1 <- gss_cat %>%
ggplot(aes(x = rincome)) +
geom_bar() +
coord_flip()
p1
source("~/.active-rstudio-document", echo=TRUE)
today()
now()
source("~/.active-rstudio-document", echo=TRUE)
dbListTables(con)
library(DBI)
library(dbplyr)
library(tidyverse)
dbListTables(con)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "duckdb")
dbWriteTable(con, "mpg", ggplot2::mpg)
dbWriteTable(con, "diamonds", ggplot2::diamonds)
dbListTables(con)
con |>
dbReadTable("diamonds") |>
as_tibble()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
repos <- tibble(json = gh_repos)
repos
repos[1]
repos[1,1]
repos[1,4]
repos[4,1]
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
df1 <- tribble(
~x, ~y,
1, list(a = 11, b = 12),
2, list(a = 21, b = 22),
3, list(a = 31, b = 32),
)
df2 <- tribble(
~x, ~y,
1, list(11, 12, 13),
2, list(21),
3, list(31, 32),
)
df1
df2
df1 |>
unnest_wider(y)
df1 |>
unnest_wider(y, names_sep = "_")
df2 |>
unnest_wider(y)
df1 |>
unnest_longer(y)
df2 |>
unnest_longer(y)
df6 <- tribble(
~x, ~y,
"a", list(1, 2),
"b", list(3),
"c", list()
)
df6
df4 <- tribble(
~x, ~y,
"a", list(1),
"b", list("a", TRUE, 5)
)
df4
repos <- tibble(json = gh_repos)
repos
repos |>
unnest_longer(json)
repos |>
unnest_longer(json) |> View()
repos |>
unnest_longer(json) |>
unnest_wider(json)
repos <- tibble(json = 'data/demo.json')
repos <- tibble(json = 'data/demo.json')
repos <- tibble(json = data/demo.json)
source("~/.active-rstudio-document", echo=TRUE)
repos
repos <- tibble(json_data)
repos
View(repos)
source("~/.active-rstudio-document", echo=TRUE)
repos
source("~/.active-rstudio-document", echo=TRUE)
json_data <- fromJSON("data/demo.json")
json_data <- fromJSON("data/demo.json")
json_data <- fromJSON("data/demo.json")
repos <- tibble(json_data)
repos
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
repos
source("~/.active-rstudio-document", echo=TRUE)
repos
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# gh_repos write to file
write_json(repos, "data/gh_repos.json")
# gh_repos write to file
write_json(gh_repos, "data/gh_repos.json")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
repos |> unnest_longer()
repos |> unnest_longer(json)
>>>>>>> 80484864bddd05aadb5b30f48924e45ac4103b7a
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
<<<<<<< HEAD
ggplot(penguins, aes(x = species)) +
geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
=======
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
df1
df2
json_data <- jsonlite::read_json("data/demo.json")
repos <- tibble(json = json_data)
repos
repos |> unnest_longer(json)
repos |> unnest_longer(json) |> unnest_wider(json)
source("~/.active-rstudio-document", echo=TRUE)
repos |> unnest_longer(json) |> unnest_wider(json) |> unnest_wider(details)
repos |> unnest_longer(json) |> unnest_wider(json) |> unnest_wider(details) |> unnest_longer(skills)
repos |>
unnest_longer(json) |>
unnest_wider(json) |>
unnest_wider(details) |>
unnest_longer(skills)
# got_chars write to json file
write_json(got_chars, "data/got_chars.json")
chars %>%
unnest(json)
chars <- tibble(json = got_chars)
chars %>%
unnest(json)
chars %>%unnest(json)
source("~/.active-rstudio-document", echo=TRUE)
diamonds %>%
ggplot(aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~cut)
source("~/.active-rstudio-document", echo=TRUE)
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
library(ggvis)
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth() +
ggsave("ggplot2.png")
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths() |>
ggsave("ggvis.png")
# ggplot2 示例
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth() +
ggsave("ggplot2.png")
# ggvis 示例
library(ggvis)
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths() |>
ggsave("ggvis.png")
# ggplot2 示例
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
ggsave("ggplot2.png")
# ggvis 示例
library(ggvis)
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths() |>
ggsave("ggvis.png")
# ggvis 示例
library(ggvis)
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths()
ggsave("ggvis.png")
# ggvis 示例
library(ggvis)
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths()
save("ggvis.html")
save("ggvis.html")
# ggvis 示例
library(ggvis)
mtcars |>
ggvis(~wt, ~mpg) |>
layer_points() |>
layer_smooths()
save("ggvis.html")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
df <- tibble(
x = 1:3,
y = c("a", "e", "f"),
z = runif(3)
)
library(tidyverse)
df <- tibble(
x = 1:3,
y = c("a", "e", "f"),
z = runif(3)
)
df1 <- data.frame(x = 1:3)
df1
df1[, "x"]
df1[, "x", drop = FALSE]
df <- tibble(
x = c(2, 3, 1, 1, NA),
y = letters[1:5],
z = runif(5)
)
df |> filter(x > 1)
df
# 1. apply() - 对矩阵或数组按行/列应用函数
matrix_data <- matrix(1:9, nrow = 3)
# 按行求和
apply(matrix_data, 1, sum)  # MARGIN=1 表示行
matrix_data
# 按列求和
apply(matrix_data, 2, sum)  # MARGIN=2 表示列
apply(matrix_data, sum)  # MARGIN=2 表示列
apply(matrix_data, FUN = sum)  # MARGIN=2 表示列
# 2. lapply() - 对列表每个元素应用函数，返回列表
list_data <- list(a = 1:3, b = 4:6, c = 7:9)
list_data
# 对每个元素求和
lapply(list_data, sum)
# 对每个元素求平均
lapply(list_data, mean)
# 3. sapply() - 类似lapply但尝试简化结果
# 返回向量或矩阵
sapply(list_data, sum)
list_data
typeof(list_data)
typeof(lapply(list_data, sum))
lapply(list_data, sum)
sapply(list_data, sum)
typeof(sapply(list_data, sum))
sapply(list_data, function(x) x * 2)
typeof(sapply(list_data, function(x) x * 2))
sapply(list_data, \(x) x * 2)
# 4. tapply() - 按因子分组后应用函数
groups <- factor(c("A","A","B","B","B"))
values <- c(1,2,3,4,5)
tapply(values, groups, sum)
# 6. vapply() - 预指定返回值类型的sapply
vapply(list_data, sum, FUN.VALUE = numeric(1))
# 6. vapply() - 预指定返回值类型的sapply
vapply(list_data, sum, FUN.VALUE = numeric(2))
# 6. vapply() - 预指定返回值类型的sapply
vapply(list_data, sum, FUN.VALUE = numeric(0))
# 6. vapply() - 预指定返回值类型的sapply
vapply(list_data, sum, FUN.VALUE = numeric(1))
library(tidyverse)
# 创建示例数据
data <- tibble(
category = c("A", "B", "C", "D"),
value = c(10, 5, 25, 15)
)
data
# 基本使用
data %>%
mutate(category = fct_reorder(category, value)) %>%
ggplot(aes(x = category, y = value)) +
geom_col()
# 基本使用
data %>%
mutate(category = fct_reorder(category, value)) %>%
View()
data %>%
mutate(category = fct_reorder(category, value)) %>%
View()
data %>%
mutate(category = fct_reorder(category, value))
data
data[['category']]
data %>%
mutate(category = fct_reorder(category, value))
data %>%
ggplot(aes(x = category, y = value)) +
geom_col()
set.seed(1)
fac <- sample(c("red", "green", "blue"), 30, replace=TRUE)
fac
x <- round(100*(10+rt(30,2)))
fac <- factor(fac, levels=c("red", "green", "blue"))
fac
x
res1 <- tapply(x, fac, sd)
res1
##       red     green      blue
##  370.9222  138.3185 1129.2587
barplot(res1)
>>>>>>> 80484864bddd05aadb5b30f48924e45ac4103b7a
